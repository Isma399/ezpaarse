#!/usr/bin/env node
//
// Command used to generate random log
//

"use strict";

var fs = require('fs');
var Faker = require('Faker');
var moment = require('moment');
var csvextractor = require('../lib/csvextractor.js');

// get the command line argument 
// platform
var optimist = require('optimist')
    .usage('Usage: $0 --platform=[string] --nb=[num] --rate=[num] --duration=[num]')
    .demand('platform').default('platform', 'sd')
    .demand('nb').alias('nb', 'n').default('nb', 'nolimit')
    .demand('rate').alias('rate', 'r').default('rate', 10)
    .demand('duration').alias('duration', 'd').default('duration', 'nolimit')
    .describe('platform', 'the publisher platform code used as a source for generating url')
    .describe('nb', 'number of lines of log to generate')
    .describe('rate', 'number of lines of log to generate per second (max 1000)')
    .describe('duration', 'stop log generation after a specific number of seconds');
var argv = optimist.argv;

// show usage if --help option is used
if (argv.help) {
  optimist.showHelp();
  process.exit(0);
}

// stop url generation when the duration is expired
if (argv.duration != 'nolimit') {
  setTimeout(function () {
    argv.nb = 0; // no more lines to generate
  }, argv.duration*1000);
}

// read the platform's urls
var urlDir  = __dirname + '/../platforms/' + argv.platform + '/test';
var urlFiles = fs.readdirSync(urlDir).filter(function (item) {
  return /.csv$/.test(item);
});
for (var i = 0, l = urlFiles.length; i < l; i++) {
  urlFiles[i] = urlDir + '/' + urlFiles[i];
}

// concatenate url list in a big array
// var urls = [];
// urlFiles.forEach(function (ufile) {
//   urls = urls.concat(fs.readFileSync(urlDir + '/' + ufile, 'UTF-8').split('\n'));
// });
csvextractor(urlFiles, ['url'], function (records) {

  // generate fake ip/login
  var nb_fake_ident = Math.max(10 * (argv.nb == 'nolimit' ? 1000 : argv.nb), 1000);
  var fakeident = [];
  while (nb_fake_ident-- > 0) {
    fakeident.push({
      ip: Math.floor(Math.random() * 255) + '.' + Math.floor(Math.random() * 255) + '.' + Math.floor(Math.random() * 255) + '.' + Math.floor(Math.random() * 255),
      login: Faker.Internet.userName().replace('\'', '').toUpperCase()
    });
  }

  // generate fake lines of log (not too fast: backpressure is handled)
  var log                    = {};
  var timeline_value         = 0;
  var stdout_no_backpressure = true;
  function writeOneLineOfLog() {

    // don't generate log lines with empty url
    if (log.url == '') {
      argv.nb = argv.nb == 'nolimit' ? argv.nb : argv.nb+1;
      return;
    }
    
    // move the time forward (max +5 seconds)
    timeline_value += Math.floor(Math.random() * 5);
    
    // generate fake log data
    var ident = fakeident[Math.floor(Math.random() * (fakeident.length-1))];
    log.ip    = ident.ip;
    log.login = ident.login;
    log.url   = records[Math.floor(Math.random() * (records.length-1))].url;
    log.date  = moment().subtract('days', 7).add('seconds', timeline_value).format('DD/MMM/YYYY:hh:mm:ss +0100'); // [30/Nov/2012:00:17:37 +0100]
    
    // write the log to stdout
    stdout_no_backpressure = process.stdout.write(log.ip + ' - ' + log.login + ' [' + log.date + '] "GET ' + log.url +' HTTP/1.1" 200 ' + Math.floor(Math.random() * 1000000) + '\n');

    // stop writing to stdout if backpressure detected
    if (!stdout_no_backpressure) {
      return;
    }
    
    // continue to next line depending on the rate parameter
    if (argv.nb == 'nolimit' || --argv.nb > 0) {
      setTimeout(writeOneLineOfLog, 1000/argv.rate);
    } else {
      process.exit(0);
    }

  }
  process.stdout.on('drain', function () {
    if (!stdout_no_backpressure) {
      writeOneLineOfLog();
    }
  });

  writeOneLineOfLog();
}, {type: 'files'});
