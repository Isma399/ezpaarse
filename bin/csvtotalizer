#!/usr/bin/env node
//
// Command used to extracte fields from log lines
//

/*jslint node: true, maxlen: 100, maxerr: 50, indent: 2 */
'use strict';

var util    = require('util');
var byline = require('byline');
var fs        = require('fs');
var csv       = require('csv');
var byline    = require('byline');
var csvextractor = require('../lib/csvextractor.js');

// get the command line argument
// platform
var optimist = require('optimist')
    .usage('Totalize fields from a CSV stream\n' +
      'Usage: $0 --fields=[string] --output="text|json"')
    .demand('output').alias('output', 'o').default('output', 'text')
    .demand('fields').alias('fields', 'f').default('fields', "domain;host;login;type")
    .demand('sort').alias('sort', 's').default('sort', 'desc')
    .describe('output', 'output : text or json')
    .describe('sort', 'sort : asc or desc in text mode')
    .describe('fields', 'fields to compute from the CSV (ex: domain;host;login;type)');
var argv = optimist.argv;

// show usage if --help option is used
if (argv.help) {
  optimist.showHelp();
  process.exit(0);
}

var csv_fields = argv.fields.split(';');
var linenb = 0;   // lines in CSV file
var records = []; // records from CSV file
var columns = {}; // result objet

// in text mode sorting function
function sortObject(obj) {
  var arr = [];
  for (var prop in obj) {
    if (obj.hasOwnProperty(prop)) {
      arr.push({
        'key': prop,
        'value': obj[prop]
      });
    }
  }
  arr.sort(function (a, b) { return a.value - b.value; });
  return arr; // returns array
}

// in text mode sorting function (reverse)
function sortObjectR(obj) {
  var arr = [];
  for (var prop in obj) {
    if (obj.hasOwnProperty(prop)) {
      arr.push({
        'key': prop,
        'value': obj[prop]
      });
    }
  }
  arr.sort(function (a, b) { return b.value - a.value; });
  return arr; // returns array
}

var stream = process.stdin;
csvextractor.extract(stream, csv_fields, function (records) {
  var fields = [];
  //console.log(records);
  records.forEach(function (record, index) {
    linenb++;
    fields = Object.keys(record);
    fields.forEach(function (field) {
      var occurence = record[field]; // to count occurence of every field

      if (columns[field]) {
        if (columns[field][occurence]) {
          columns[field][occurence]++;
        } else {
          columns[field][occurence] = 1;
        }
      } else {
        columns[field] = {};
        columns[field][occurence] = 1;
      }
    });
  });
  if (argv.output == 'json') {
    console.log(util.inspect(columns));
  } else {
    console.log("Total Evenements de Consultation : %s", linenb);
    fields = Object.keys(columns);
    // todo : sort by value desc
    fields.forEach(function (field) {
      var arr = []; // for sorting purpose, desc by default
      if (argv.sort == 'asc') { arr = sortObject(columns[field]); }
      else { arr = sortObjectR(columns[field]); }
      console.log(field + " (" + arr.length + ")");
      var items = Object.keys(columns[field]);
      arr.forEach(function (item, id) {
        console.log("\t%s\t = %s", item.key, item.value);
      });
    });
  }
},
{
  silent: true
});