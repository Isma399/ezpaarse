#!/usr/bin/env node
//
// Command used to extracte fields from log lines
//

/*jslint node: true, maxlen: 100, maxerr: 50, indent: 2 */
'use strict';

var util    = require('util');
var byline = require('byline');
var fs        = require('fs');
var csv       = require('csv');
var byline    = require('byline');
var csvextractor = require('../lib/csvextractor.js');

// get the command line argument
// platform
var optimist = require('optimist')
    .usage('Extract fields from a CSV stream\nUsage: $0 --fields=[string] --output="text|json"')
    .demand('output').alias('output', 'o').default('output', 'text')
    .demand('fields').alias('fields', 'f').default('fields', "url")
    .describe('output', 'output : text or json')
    .describe('fields', 'fields to extract from the CSV (ex: url)');
var argv = optimist.argv;

// show usage if --help option is used
if (argv.help) {
  optimist.showHelp();
  process.exit(0);
}

var csv_fields = argv.fields.split(',');
var linenb = 0;
var records = [];
var columns = {};

var stream = process.stdin;
csvextractor(stream, csv_fields, function (records) {
  var fields = [];
  records.forEach(function (record, index) {
    linenb++;
    fields = Object.keys(record);
    fields.forEach(function (field) {
      var rfield = ''; // record field value prefixed with s if num√©ric to make a key
      if (!isNaN(record[field])) {
        rfield = 'r' + record[field];
      } else {
        rfield = record[field];
      }
      if (columns[field]) {
        if (columns[field][rfield]) {
          columns[field][rfield]++;
        } else {
          columns[field][rfield] = 1;
        }
      } else {
        columns[field] = [];
        columns[field][rfield] = 1;
      }
    });
  });
  if (argv.output == 'json') {
    process.stdout.write(util.inspect(columns));
  } else {
    console.log("Total Evenements de Consultation : %s", linenb);
    fields = Object.keys(columns);
    // todo : sort by value desc
    fields.forEach(function (field) {
      console.log(field + " (" + Object.keys(columns[field]).length + ")");
      var items = Object.keys(columns[field]);
      items.forEach(function (item, id) {
        console.log("\t" + item + " = \t" + columns[field][item]);
      });
    });
  }
},
{
  silent: true,
  type: 'stream'
});
