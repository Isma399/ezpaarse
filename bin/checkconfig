#!/usr/bin/env node

/*jslint node: true, maxlen: 100, maxerr: 50, indent: 2 */
'use strict';

var fs = require('fs');
var net = require('net');
var Socket = net.Socket;
var shell = require('shelljs');
var os = require('os');
var config = require('../config.json');

var red = '\u001b[31m';     // Color red
var brown = '\u001b[33m';  // Color brown
var reset = '\u001b[0m';    // Color reset

if (!config.EZPAARSE_ADMIN_MAIL) {
  console.error('The admin mail must be specified');
}

if (!config.EZPAARSE_NODEJS_PORT) {
  console.error("No server port found");
} else {
  var socket = new Socket();
  var used = true;

  // Socket connection established, port is open
  socket.on('connect', function() {
    socket.end();
  })

  // If no response, assume port is not listening
  socket.setTimeout(400)
  socket.on('timeout', function() {
    used = false;
    socket.destroy();
  });

  // Assuming the port is not open if an error. May need to refine based on
  // exception
  socket.on('error', function(exception) {
    used = false;
  });

  // Return after the socket has closed
  socket.on('close', function(exception) {
    if (used) {
      console.error("Server port already in use");
    }
  });

  socket.connect(config.EZPAARSE_NODEJS_PORT, '127.0.0.1');
}


var platform = os.platform();
var release = os.release();
var dist;

if (platform == 'linux') {
  if (fs.existsSync('/etc/debian_version')) {
    dist = 'Debian';
  } else if (fs.existsSync('/etc/SuSE-release')) {
    dist = 'SuSE';
  } else if (fs.existsSync('/etc/redhat-release')) {
    dist = 'RedHat';
  } else if (fs.existsSync('/etc/mandrake-release')) {
    dist = 'Mandrake';
  } else if (fs.existsSync('/etc/fedora-release')) {
    dist = 'Fedora';
  }
}
console.log('Operating system : ' + platform + ' ' + release + (dist ? ' (' + dist + ')' : ''));




if (dist == 'Debian') {
  var dependencies = [
    'php5-cli',
    'tmpreaper',
    'build-essential',
    'libldap2-dev',
    'uuid-dev',
    'expect'
  ];

  dependencies.forEach(function (dep) {
    if (shell.exec('dpkg -l ' + dep, {silent: true}).code !== 0) {
      console.error("\nThis script requires " + red + dep + reset + " but it is not installed.");
      console.error("If you are running ubuntu or debian you might be able to install " + dep + " with the following command :");
      console.error(brown + "sudo apt-get install " + dep + reset);
    }
  });
}