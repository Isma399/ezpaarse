#!/usr/bin/env node
//
// Command used to extracte fields from log lines
//

/*jslint node: true, maxlen: 100, maxerr: 50, indent: 2 */
'use strict';

var byline    = require('byline');
var fs        = require('fs');
var LogParser = require('../lib/logParser.js');

// get the command line argument 
// platform
var optimist = require('optimist')
    .usage('Extract specific fields from a log stream\nUsage: $0 --fields=[string] --separator=";"')
    .demand('fields').alias('fields', 'f')
    .demand('separator').alias('separator', 'sep').alias('separator', 's').default('separator', '\t')
    .alias('input','i')
    .alias('output','o')
    .alias('proxy', 'p')
    .alias('format', 't')
    .describe('fields', 'fields to extract from log lines (ex: url,login,host)')
    .describe('separator', 'character to use between each field')
    .describe('input', 'a file to extract the fields from (default: stdin)')
    .describe('output', 'a file to send the result to (default: stdout)')
    .describe('proxy', 'the proxy which generated the log file')
    .describe('format', 'the format of log lines (ex: %h %u [%t] "%r")');
var argv = optimist.argv;

// show usage if --help option is used
if (argv.help) {
  optimist.showHelp();
  process.exit(0);
}

var logParser = new LogParser(argv.format, argv.proxy);

var resultStream;
var logStream;

if (argv.output) {
  resultStream = fs.createWriteStream(argv.output);
} else {
  resultStream = process.stdout;
}
if (argv.input) {
  logStream = fs.createReadStream(argv.input);
} else {
  logStream = process.stdin;
}

var sep    = argv.separator;
var fields = argv.fields.split(',');
var linenb = 1;
var stream = byline.createStream(logStream);
stream.on('data', function (line) {
  var ignored = false;
  var result  = '';
  var ec      = logParser.parse(line);
  if (ec) {
    fields.forEach(function (field, index) {
      if (ec[field]) {
        result += ec[field];
        if (index < fields.length-1) { result += sep; }
      } else {
        ignored = true;
        process.stderr.write('Error: field ' + field + ' not found in line #' + linenb + '\n');
      }
    });
    
    // next line
    if (!ignored) {
      resultStream.write(result + '\n');
    }
  }
  linenb++;
});
