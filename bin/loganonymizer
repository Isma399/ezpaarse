#!/usr/bin/env ezpaarse-node
/*jslint node: true, maxlen: 100, maxerr: 50, indent: 2 */
'use strict';

/*
* Log file cleaner
* Takes a log file and and makes its critical data (hosts, logins) anonymous
* @param1 log file to clean
* @param2 destination of the clean log file
*/

var byline    = require('byline');
var Faker     = require('Faker');
var fs        = require('fs');
var LogParser = require('../lib/logparser.js');

var brown = '\u001b[33m';   // Color brown
var reset = '\u001b[0m';    // Color reset

Faker.Internet.ip = function () {
  var randNum = function () {
    return (Math.random() * 254 + 1).toFixed(0);
  }

  var result = [];
  for (var i = 0; i < 4; i++) {
    result[i] = randNum();
  }

  return result.join(".");
};

// get the command line arguments
var optimist = require('optimist')
    .usage('Anonymize critical data in a log file' +
      '\nUsage: $0 --input=[string] --output=[string] --proxy=[string] --format[string]')
    .alias('help', 'h')
    .alias('input', 'i')
    .alias('output', 'o')
    .alias('proxy', 'p')
    .alias('format', 'f')
    .describe('input', 'the input data to clean')
    .describe('output', 'the destination where to send the result to')
    .describe('proxy', 'the proxy which generated the log file')
    .describe('format', 'the format of log lines (ex: %h %u [%t] "%r")');
var argv = optimist.argv;

// show usage if --help option is used
if (argv.help) {
  optimist.showHelp();
  process.exit(0);
}
    
var logParser = new LogParser(argv.format, argv.proxy);

var resultStream;
var logStream;

if (argv.output) {
  resultStream = fs.createWriteStream(argv.output);
} else {
  resultStream = process.stdout;
}
if (argv.input) {
  logStream = fs.createReadStream(argv.input);
} else {
  logStream = process.stdin;
}

var hosts           = [];
var logins          = [];
var fakeHostsList   = [];
var fakeLoginsList  = [];

var stream = byline.createStream(logStream);

stream.on('data', function (line) {
  var ec = logParser.parse(line);
  if (ec) {
    if (ec.host) {
      if (hosts.indexOf(ec.host) === -1) {
        hosts.push(ec.host);
      }
      var fakeHost = fakeHostsList[hosts.indexOf(ec.host)];
      if (!fakeHost) {
        fakeHost = Faker.Internet.ip();
        while (fakeHostsList.indexOf(fakeHost) != -1) {
          fakeHost = Faker.Internet.ip();
        }
        fakeHostsList.push(fakeHost);
      }
      line = line.replace(ec.host, fakeHost);
    }
    if (ec.login) {
      if (logins.indexOf(ec.login) === -1) {
        logins.push(ec.login);
      }
      var fakeLogin = fakeLoginsList[logins.indexOf(ec.login)];
      if (!fakeLogin) {
        fakeLogin = Faker.Internet.userName().replace('\'', '').toUpperCase();
        while (fakeLoginsList.indexOf(fakeLogin) != -1) {
          fakeLogin = Faker.Internet.userName().replace('\'', '').toUpperCase();
        }
        fakeLoginsList.push(fakeLogin);
      }
      line = line.replace(ec.login, fakeLogin);
    }
    resultStream.write(line + '\n');
  } else {
    console.error(brown + 'One line couldn\'t be parsed and was removed' + reset);
  }
});
