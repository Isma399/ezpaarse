#!/usr/bin/env node

/*jslint node: true, maxlen: 100, maxerr: 50, indent: 2 */
'use strict';
var byline = require('byline');
var URL = require('url');
var querystring = require('querystring');

function parseUrl(url) {
    var result = {};
    var param = querystring.parse(URL.parse(url).query);
    
    var match;
    if (match = /\/([a-zA-Z0-9]+)\/journal\/v([0-9]*)\/n([0-9]*)\/(pdf|full)\/([a-zA-Z0-9]*).(pdf|html)/.exec(url)) {
      result.pid = match[1];
      //result.volume = match[2];
      //result.numero = match[3];
      //result.revue  = match[5];
      result.type   = match[4].toUpperCase() == "FULL" ? "TXT" : match[4].toUpperCase();
    } else if (match = /\/([a-zA-Z0-9]+)\/journal\/v([0-9]*)\/n([0-9]*)\/index.html/.exec(url)) {
      result.pid = match[1];
//      result.volume = match[3];
//      result.numero = match[3];
      result.type   = 'TOC';
    } else if (match = /\/([a-zA-Z0-9]+)\/index.html/.exec(url)) {
      result.pid = match[1];
      result.type   = 'TOC';
    } else if (match = /\/([a-zA-Z0-9]+)\/current_issue.html/.exec(url)) {
      result.pid = match[1];
      result.type   = 'TOC';
    } else if (match = /\/siteindex\/index.html/.exec(url)) {
      result.type   = 'TOC';
    }

    return result;
  }

/*
* If an array of urls is given, return an array of results
* Otherwise, read stdin and write into stdout
*/
exports.parserExecute = function (urls) {

  if (urls && Array.isArray(urls)) {
    var results = [];
    for (var i = 0, l = urls.length; i < l; i++) {
      results.push(parseUrl(urls[i]));
    }
    return results;
  } else {
    var stdin = process.stdin;
    var stdout = process.stdout;
    var stream = byline.createStream(stdin);

    stream.on('end', function () {
      process.exit(0);
    });

    stream.on('close  ', function () {
      process.exit(0);
    });

    stream.on('data', function (line) {
      stdout.write(JSON.stringify(parseUrl(line)) + '\n');
    });
  }
}

if (!module.parent) {
  var optimist = require('optimist')
    .usage('Parse URLs read from standard input. ' +
      'You can either use pipes or enter URLs manually.' +
      '\n  Usage: $0' +
      '\n  Example: cat urls.txt | $0');
  var argv = optimist.argv;

  // show usage if --help option is used
  if (argv.help || argv.h) {
    optimist.showHelp();
    process.exit(0);
  }

  exports.parserExecute();
}
